def encrypt(s):
    """
    Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being
    rotated. The alphabet should be rotated in a manner such that the letters shift down by two multiplied to two places.
    For example:
    encrypt(’hi’) returns ’lm’
    encrypt(’asdfghjkl’) returns ’ewhjklnop’
    encrypt(’gf’) returns ’kj’
    encrypt(’et’) returns ’ix’
    Let’s think step by step.
    1. Create a alphabet, bias two places multiplied by two.
    2. Loop the input, find the latter bias letter in alphabet.
    3. Return result.
    """


def check if last char is a letter(txt):
    """
    Create a function that returns True if the last character of a given string is an alphabetical character and is not a
    part of a word, and False otherwise. Note: ”word” is a group of characters separated by space.
    Examples:
    check if last char is a letter(”apple pie”) → False
    check if last char is a letter(”apple pi e”) → True
    check if last char is a letter(”apple pi e ”) → False
    check if last char is a letter(””) → False
    Let’s think step by step.
    1. If the string is empty, return False.
    2. If the string does not end with a alphabetical character, return False.
    3. Split the given string into a list of words.
    4. Check if the length of the last word is equal to 1.
    """


def file name check(file name):
    """
    Create a function which takes a string representing a file’s name, and returns ’Yes’ if the the file’s name is valid,
    and returns ’No’ otherwise. A file’s name is considered to be valid if and only if all the following conditions are met:
    - There should not be more than three digits (’0’-’9’) in the file’s name. - The file’s name contains exactly one dot
    ’.’ - The substring before the dot should not be empty, and it starts with a letter from the latin alphapet (’a’-’z’ and
    ’A’-’Z’). - The substring after the dot should be one of these: [’txt’, ’exe’, ’dll’]
    Examples:
    file name check(”example.txt”) => ’Yes’
    file name check(”1example.dll”) => ’No’ (the name should start with a latin alphapet letter)
    Let’s think step by step.
    1. Check if the file name is valid according to the conditions.
    2. Return ”Yes” if valid, otherwise return ”NO”.
    """


def fruit distribution(s,n):
    """
    In this task, you will be given a string that represents a number of apples and oranges that are distributed in a
    basket of fruit this basket contains apples, oranges, and mango fruits. Given the string that represents the total number
    of the oranges and apples and an integer that represent the total number of the fruits in the basket return the number
    of the mango fruits in the basket.
    for examble:
    fruit distribution(”5 apples and 6 oranges”, 19) -¿19 - 5 - 6 = 8
    fruit distribution(”0 apples and 1 oranges”,3) -¿ 3 - 0 - 1 = 2
    fruit distribution(”2 apples and 3 oranges”, 100) -¿ 100 - 2 - 3 = 95
    fruit distribution(”100 apples and 1 oranges”,120) -¿ 120 - 100 - 1 = 19
    Let’s think step by step.
    1. Extract the numbers of oranges and apples from given string.
    2. Calculate the sum of oranges and apples.
    3. Deduct the sum from the total number of fruits.
    4. Return the number of mangoes.
    """


def prime fib(n: int):
    """
    prime fib returns n-th number that is a Fibonacci number and it’s also prime.
    Examples:
    >>> prime fib(1) 2
    >>> prime fib(2) 3
    >>> prime fib(3) 5
    >>> prime fib(4) 13
    >>> prime fib(5) 89
    Let’s think step by step.
    1. Create a function to check if a number is prime.
    2. Generate a Fibonacci sequence.
    3. Check if each number in the Fibonacci sequence is prime, decrement the counter.
    4. If the counter is 0, return the Fibonacci number.
    """


def search(lst):
    """
    You are given a non-empty list of positive integers. Return the greatest integer that is greater than zero, and has
    a frequency greater than or equal to the value of the integer itself. The frequency of an integer is the number of times
    it appears in the list. If no such a value exist, return -1.
    Examples:
    search([4, 1, 2, 2, 3, 1]) == 2
    search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3
    search([5, 5, 4, 4, 4]) == -1
    Let’s think step by step.
    1. Create a frequency dict.
    2. Sort the input list.
    3. Loop the input list, if frequency no lesser than the integer, set result.
    4. Return the result.
    """


def compare one(a, b):
    """
    Create a function that takes integers, floats, or strings representing real numbers, and returns the larger variable
    in its given variable type. Return None if the values are equal. Note: If a real number is represented as a string, the
    floating point might be . or ,
    Examples:
    compare one(1, 2.5) → 2.5
    compare one(1, ”2,3”) → ”2,3”
    compare one(”5,1”, ”6”) → ”6”
    compare one(”1”, 1) → None
    Let’s think step by step.
    1. Store the original inputs.
    2. Check if inputs are strings and convert to floats.
    3. Compare the two inputs and return the larger one in its original data type.
    """


def sort even(l: list):
    """
    This function takes a list l and returns a list l’ such that l’ is identical to l in the odd indicies, while its values at
    the even indicies are equal to the values of the even indicies of l, but sorted.
    Examples:
    >>> sort even([1, 2, 3])
    [1, 2, 3]
    >>> sort even([5, 6, 3, 4])
    [3, 6, 5, 4]
    Let’s think step by step.
    1. Create a list of all the even indices of the given list.
    2. Sort the list of even indices.
    3. Return a new list that is identical to the original list in the odd indicies, and equal to the sorted even indices
    in the even indicies.
    """

